// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protocol/EntryProtocol.proto

package com_alibaba_otter_canal_protocol

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// *打散后的事件类型，主要用于标识事务的开始，变更数据，结束*
type EntryType int32

const (
	EntryType_ENTRYTYPECOMPATIBLEPROTO2 EntryType = 0
	EntryType_TRANSACTIONBEGIN          EntryType = 1
	EntryType_ROWDATA                   EntryType = 2
	EntryType_TRANSACTIONEND            EntryType = 3
	// * 心跳类型，内部使用，外部暂不可见，可忽略 *
	EntryType_ENTRY_TYPE_HEARTBEAT EntryType = 4
	EntryType_GTIDLOG              EntryType = 5
)

var EntryType_name = map[int32]string{
	0: "ENTRYTYPECOMPATIBLEPROTO2",
	1: "TRANSACTIONBEGIN",
	2: "ROWDATA",
	3: "TRANSACTIONEND",
	4: "ENTRY_TYPE_HEARTBEAT",
	5: "GTIDLOG",
}
var EntryType_value = map[string]int32{
	"ENTRYTYPECOMPATIBLEPROTO2": 0,
	"TRANSACTIONBEGIN":          1,
	"ROWDATA":                   2,
	"TRANSACTIONEND":            3,
	"ENTRY_TYPE_HEARTBEAT":      4,
	"GTIDLOG":                   5,
}

func (x EntryType) String() string {
	return proto.EnumName(EntryType_name, int32(x))
}
func (EntryType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_EntryProtocol_2a4ebfbd10b58cba, []int{0}
}

// * 事件类型 *
type EventType int32

const (
	EventType_EVENTTYPECOMPATIBLEPROTO2 EventType = 0
	EventType_INSERT                    EventType = 1
	EventType_UPDATE                    EventType = 2
	EventType_DELETE                    EventType = 3
	EventType_CREATE                    EventType = 4
	EventType_ALTER                     EventType = 5
	EventType_ERASE                     EventType = 6
	EventType_QUERY                     EventType = 7
	EventType_TRUNCATE                  EventType = 8
	EventType_RENAME                    EventType = 9
	// *CREATE INDEX*
	EventType_CINDEX EventType = 10
	EventType_DINDEX EventType = 11
	EventType_GTID   EventType = 12
	// * XA *
	EventType_XACOMMIT   EventType = 13
	EventType_XAROLLBACK EventType = 14
	// * MASTER HEARTBEAT *
	EventType_MHEARTBEAT EventType = 15
)

var EventType_name = map[int32]string{
	0:  "EVENTTYPECOMPATIBLEPROTO2",
	1:  "INSERT",
	2:  "UPDATE",
	3:  "DELETE",
	4:  "CREATE",
	5:  "ALTER",
	6:  "ERASE",
	7:  "QUERY",
	8:  "TRUNCATE",
	9:  "RENAME",
	10: "CINDEX",
	11: "DINDEX",
	12: "GTID",
	13: "XACOMMIT",
	14: "XAROLLBACK",
	15: "MHEARTBEAT",
}
var EventType_value = map[string]int32{
	"EVENTTYPECOMPATIBLEPROTO2": 0,
	"INSERT":                    1,
	"UPDATE":                    2,
	"DELETE":                    3,
	"CREATE":                    4,
	"ALTER":                     5,
	"ERASE":                     6,
	"QUERY":                     7,
	"TRUNCATE":                  8,
	"RENAME":                    9,
	"CINDEX":                    10,
	"DINDEX":                    11,
	"GTID":                      12,
	"XACOMMIT":                  13,
	"XAROLLBACK":                14,
	"MHEARTBEAT":                15,
}

func (x EventType) String() string {
	return proto.EnumName(EventType_name, int32(x))
}
func (EventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_EntryProtocol_2a4ebfbd10b58cba, []int{1}
}

// *数据库类型*
type Type int32

const (
	Type_TYPECOMPATIBLEPROTO2 Type = 0
	Type_ORACLE               Type = 1
	Type_MYSQL                Type = 2
	Type_PGSQL                Type = 3
)

var Type_name = map[int32]string{
	0: "TYPECOMPATIBLEPROTO2",
	1: "ORACLE",
	2: "MYSQL",
	3: "PGSQL",
}
var Type_value = map[string]int32{
	"TYPECOMPATIBLEPROTO2": 0,
	"ORACLE":               1,
	"MYSQL":                2,
	"PGSQL":                3,
}

func (x Type) String() string {
	return proto.EnumName(Type_name, int32(x))
}
func (Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_EntryProtocol_2a4ebfbd10b58cba, []int{2}
}

// ***************************************************************
// message model
// 如果要在Enum中新增类型，确保以前的类型的下标值不变.
// **************************************************************
type Entry struct {
	// *协议头部信息*
	Header *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// /**打散后的事件类型**/ [default = ROWDATA]
	//
	// Types that are valid to be assigned to EntryTypePresent:
	//	*Entry_EntryType
	EntryTypePresent isEntry_EntryTypePresent `protobuf_oneof:"entryType_present"`
	// *传输的二进制数组*
	StoreValue           []byte   `protobuf:"bytes,3,opt,name=storeValue,proto3" json:"storeValue,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Entry) Reset()         { *m = Entry{} }
func (m *Entry) String() string { return proto.CompactTextString(m) }
func (*Entry) ProtoMessage()    {}
func (*Entry) Descriptor() ([]byte, []int) {
	return fileDescriptor_EntryProtocol_2a4ebfbd10b58cba, []int{0}
}
func (m *Entry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Entry.Unmarshal(m, b)
}
func (m *Entry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Entry.Marshal(b, m, deterministic)
}
func (dst *Entry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Entry.Merge(dst, src)
}
func (m *Entry) XXX_Size() int {
	return xxx_messageInfo_Entry.Size(m)
}
func (m *Entry) XXX_DiscardUnknown() {
	xxx_messageInfo_Entry.DiscardUnknown(m)
}

var xxx_messageInfo_Entry proto.InternalMessageInfo

func (m *Entry) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

type isEntry_EntryTypePresent interface {
	isEntry_EntryTypePresent()
}

type Entry_EntryType struct {
	EntryType EntryType `protobuf:"varint,2,opt,name=entryType,proto3,enum=com.alibaba.otter.canal.protocol.EntryType,oneof"`
}

func (*Entry_EntryType) isEntry_EntryTypePresent() {}

func (m *Entry) GetEntryTypePresent() isEntry_EntryTypePresent {
	if m != nil {
		return m.EntryTypePresent
	}
	return nil
}

func (m *Entry) GetEntryType() EntryType {
	if x, ok := m.GetEntryTypePresent().(*Entry_EntryType); ok {
		return x.EntryType
	}
	return EntryType_ENTRYTYPECOMPATIBLEPROTO2
}

func (m *Entry) GetStoreValue() []byte {
	if m != nil {
		return m.StoreValue
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Entry) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Entry_OneofMarshaler, _Entry_OneofUnmarshaler, _Entry_OneofSizer, []interface{}{
		(*Entry_EntryType)(nil),
	}
}

func _Entry_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Entry)
	// entryType_present
	switch x := m.EntryTypePresent.(type) {
	case *Entry_EntryType:
		b.EncodeVarint(2<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.EntryType))
	case nil:
	default:
		return fmt.Errorf("Entry.EntryTypePresent has unexpected type %T", x)
	}
	return nil
}

func _Entry_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Entry)
	switch tag {
	case 2: // entryType_present.entryType
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.EntryTypePresent = &Entry_EntryType{EntryType(x)}
		return true, err
	default:
		return false, nil
	}
}

func _Entry_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Entry)
	// entryType_present
	switch x := m.EntryTypePresent.(type) {
	case *Entry_EntryType:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.EntryType))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// *message Header*
type Header struct {
	// [default = 1]
	//
	// Types that are valid to be assigned to VersionPresent:
	//	*Header_Version
	VersionPresent isHeader_VersionPresent `protobuf_oneof:"version_present"`
	// *binlog/redolog 文件名*
	LogfileName string `protobuf:"bytes,2,opt,name=logfileName,proto3" json:"logfileName,omitempty"`
	// *binlog/redolog 文件的偏移位置*
	LogfileOffset int64 `protobuf:"varint,3,opt,name=logfileOffset,proto3" json:"logfileOffset,omitempty"`
	// *服务端serverId*
	ServerId int64 `protobuf:"varint,4,opt,name=serverId,proto3" json:"serverId,omitempty"`
	// * 变更数据的编码 *
	ServerenCode string `protobuf:"bytes,5,opt,name=serverenCode,proto3" json:"serverenCode,omitempty"`
	// *变更数据的执行时间 *
	ExecuteTime int64 `protobuf:"varint,6,opt,name=executeTime,proto3" json:"executeTime,omitempty"`
	// [default = MYSQL]
	//
	// Types that are valid to be assigned to SourceTypePresent:
	//	*Header_SourceType
	SourceTypePresent isHeader_SourceTypePresent `protobuf_oneof:"sourceType_present"`
	// * 变更数据的schemaname*
	SchemaName string `protobuf:"bytes,8,opt,name=schemaName,proto3" json:"schemaName,omitempty"`
	// *变更数据的tablename*
	TableName string `protobuf:"bytes,9,opt,name=tableName,proto3" json:"tableName,omitempty"`
	// *每个event的长度*
	EventLength int64 `protobuf:"varint,10,opt,name=eventLength,proto3" json:"eventLength,omitempty"`
	// [default = UPDATE]
	//
	// Types that are valid to be assigned to EventTypePresent:
	//	*Header_EventType
	EventTypePresent isHeader_EventTypePresent `protobuf_oneof:"eventType_present"`
	// *预留扩展*
	Props []*Pair `protobuf:"bytes,12,rep,name=props,proto3" json:"props,omitempty"`
	// *当前事务的gitd*
	Gtid                 string   `protobuf:"bytes,13,opt,name=gtid,proto3" json:"gtid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Header) Reset()         { *m = Header{} }
func (m *Header) String() string { return proto.CompactTextString(m) }
func (*Header) ProtoMessage()    {}
func (*Header) Descriptor() ([]byte, []int) {
	return fileDescriptor_EntryProtocol_2a4ebfbd10b58cba, []int{1}
}
func (m *Header) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Header.Unmarshal(m, b)
}
func (m *Header) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Header.Marshal(b, m, deterministic)
}
func (dst *Header) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Header.Merge(dst, src)
}
func (m *Header) XXX_Size() int {
	return xxx_messageInfo_Header.Size(m)
}
func (m *Header) XXX_DiscardUnknown() {
	xxx_messageInfo_Header.DiscardUnknown(m)
}

var xxx_messageInfo_Header proto.InternalMessageInfo

type isHeader_VersionPresent interface {
	isHeader_VersionPresent()
}

type Header_Version struct {
	Version int32 `protobuf:"varint,1,opt,name=version,proto3,oneof"`
}

func (*Header_Version) isHeader_VersionPresent() {}

func (m *Header) GetVersionPresent() isHeader_VersionPresent {
	if m != nil {
		return m.VersionPresent
	}
	return nil
}

func (m *Header) GetVersion() int32 {
	if x, ok := m.GetVersionPresent().(*Header_Version); ok {
		return x.Version
	}
	return 0
}

func (m *Header) GetLogfileName() string {
	if m != nil {
		return m.LogfileName
	}
	return ""
}

func (m *Header) GetLogfileOffset() int64 {
	if m != nil {
		return m.LogfileOffset
	}
	return 0
}

func (m *Header) GetServerId() int64 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

func (m *Header) GetServerenCode() string {
	if m != nil {
		return m.ServerenCode
	}
	return ""
}

func (m *Header) GetExecuteTime() int64 {
	if m != nil {
		return m.ExecuteTime
	}
	return 0
}

type isHeader_SourceTypePresent interface {
	isHeader_SourceTypePresent()
}

type Header_SourceType struct {
	SourceType Type `protobuf:"varint,7,opt,name=sourceType,proto3,enum=com.alibaba.otter.canal.protocol.Type,oneof"`
}

func (*Header_SourceType) isHeader_SourceTypePresent() {}

func (m *Header) GetSourceTypePresent() isHeader_SourceTypePresent {
	if m != nil {
		return m.SourceTypePresent
	}
	return nil
}

func (m *Header) GetSourceType() Type {
	if x, ok := m.GetSourceTypePresent().(*Header_SourceType); ok {
		return x.SourceType
	}
	return Type_TYPECOMPATIBLEPROTO2
}

func (m *Header) GetSchemaName() string {
	if m != nil {
		return m.SchemaName
	}
	return ""
}

func (m *Header) GetTableName() string {
	if m != nil {
		return m.TableName
	}
	return ""
}

func (m *Header) GetEventLength() int64 {
	if m != nil {
		return m.EventLength
	}
	return 0
}

type isHeader_EventTypePresent interface {
	isHeader_EventTypePresent()
}

type Header_EventType struct {
	EventType EventType `protobuf:"varint,11,opt,name=eventType,proto3,enum=com.alibaba.otter.canal.protocol.EventType,oneof"`
}

func (*Header_EventType) isHeader_EventTypePresent() {}

func (m *Header) GetEventTypePresent() isHeader_EventTypePresent {
	if m != nil {
		return m.EventTypePresent
	}
	return nil
}

func (m *Header) GetEventType() EventType {
	if x, ok := m.GetEventTypePresent().(*Header_EventType); ok {
		return x.EventType
	}
	return EventType_EVENTTYPECOMPATIBLEPROTO2
}

func (m *Header) GetProps() []*Pair {
	if m != nil {
		return m.Props
	}
	return nil
}

func (m *Header) GetGtid() string {
	if m != nil {
		return m.Gtid
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Header) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Header_OneofMarshaler, _Header_OneofUnmarshaler, _Header_OneofSizer, []interface{}{
		(*Header_Version)(nil),
		(*Header_SourceType)(nil),
		(*Header_EventType)(nil),
	}
}

func _Header_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Header)
	// version_present
	switch x := m.VersionPresent.(type) {
	case *Header_Version:
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Version))
	case nil:
	default:
		return fmt.Errorf("Header.VersionPresent has unexpected type %T", x)
	}
	// sourceType_present
	switch x := m.SourceTypePresent.(type) {
	case *Header_SourceType:
		b.EncodeVarint(7<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.SourceType))
	case nil:
	default:
		return fmt.Errorf("Header.SourceTypePresent has unexpected type %T", x)
	}
	// eventType_present
	switch x := m.EventTypePresent.(type) {
	case *Header_EventType:
		b.EncodeVarint(11<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.EventType))
	case nil:
	default:
		return fmt.Errorf("Header.EventTypePresent has unexpected type %T", x)
	}
	return nil
}

func _Header_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Header)
	switch tag {
	case 1: // version_present.version
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.VersionPresent = &Header_Version{int32(x)}
		return true, err
	case 7: // sourceType_present.sourceType
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.SourceTypePresent = &Header_SourceType{Type(x)}
		return true, err
	case 11: // eventType_present.eventType
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.EventTypePresent = &Header_EventType{EventType(x)}
		return true, err
	default:
		return false, nil
	}
}

func _Header_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Header)
	// version_present
	switch x := m.VersionPresent.(type) {
	case *Header_Version:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.Version))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// sourceType_present
	switch x := m.SourceTypePresent.(type) {
	case *Header_SourceType:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.SourceType))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// eventType_present
	switch x := m.EventTypePresent.(type) {
	case *Header_EventType:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.EventType))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// *每个字段的数据结构*
type Column struct {
	// *字段下标*
	Index int32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// *字段java中类型*
	SqlType int32 `protobuf:"varint,2,opt,name=sqlType,proto3" json:"sqlType,omitempty"`
	// *字段名称(忽略大小写)，在mysql中是没有的*
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// *是否是主键*
	IsKey bool `protobuf:"varint,4,opt,name=isKey,proto3" json:"isKey,omitempty"`
	// *如果EventType=UPDATE,用于标识这个字段值是否有修改*
	Updated bool `protobuf:"varint,5,opt,name=updated,proto3" json:"updated,omitempty"`
	// [default = false]
	//
	// Types that are valid to be assigned to IsNullPresent:
	//	*Column_IsNull
	IsNullPresent isColumn_IsNullPresent `protobuf_oneof:"isNull_present"`
	// *预留扩展*
	Props []*Pair `protobuf:"bytes,7,rep,name=props,proto3" json:"props,omitempty"`
	// * 字段值,timestamp,Datetime是一个时间格式的文本 *
	Value string `protobuf:"bytes,8,opt,name=value,proto3" json:"value,omitempty"`
	// * 对应数据对象原始长度 *
	Length int32 `protobuf:"varint,9,opt,name=length,proto3" json:"length,omitempty"`
	// *字段mysql类型*
	MysqlType            string   `protobuf:"bytes,10,opt,name=mysqlType,proto3" json:"mysqlType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Column) Reset()         { *m = Column{} }
func (m *Column) String() string { return proto.CompactTextString(m) }
func (*Column) ProtoMessage()    {}
func (*Column) Descriptor() ([]byte, []int) {
	return fileDescriptor_EntryProtocol_2a4ebfbd10b58cba, []int{2}
}
func (m *Column) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Column.Unmarshal(m, b)
}
func (m *Column) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Column.Marshal(b, m, deterministic)
}
func (dst *Column) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Column.Merge(dst, src)
}
func (m *Column) XXX_Size() int {
	return xxx_messageInfo_Column.Size(m)
}
func (m *Column) XXX_DiscardUnknown() {
	xxx_messageInfo_Column.DiscardUnknown(m)
}

var xxx_messageInfo_Column proto.InternalMessageInfo

func (m *Column) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Column) GetSqlType() int32 {
	if m != nil {
		return m.SqlType
	}
	return 0
}

func (m *Column) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Column) GetIsKey() bool {
	if m != nil {
		return m.IsKey
	}
	return false
}

func (m *Column) GetUpdated() bool {
	if m != nil {
		return m.Updated
	}
	return false
}

type isColumn_IsNullPresent interface {
	isColumn_IsNullPresent()
}

type Column_IsNull struct {
	IsNull bool `protobuf:"varint,6,opt,name=isNull,proto3,oneof"`
}

func (*Column_IsNull) isColumn_IsNullPresent() {}

func (m *Column) GetIsNullPresent() isColumn_IsNullPresent {
	if m != nil {
		return m.IsNullPresent
	}
	return nil
}

func (m *Column) GetIsNull() bool {
	if x, ok := m.GetIsNullPresent().(*Column_IsNull); ok {
		return x.IsNull
	}
	return false
}

func (m *Column) GetProps() []*Pair {
	if m != nil {
		return m.Props
	}
	return nil
}

func (m *Column) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Column) GetLength() int32 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *Column) GetMysqlType() string {
	if m != nil {
		return m.MysqlType
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Column) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Column_OneofMarshaler, _Column_OneofUnmarshaler, _Column_OneofSizer, []interface{}{
		(*Column_IsNull)(nil),
	}
}

func _Column_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Column)
	// isNull_present
	switch x := m.IsNullPresent.(type) {
	case *Column_IsNull:
		t := uint64(0)
		if x.IsNull {
			t = 1
		}
		b.EncodeVarint(6<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case nil:
	default:
		return fmt.Errorf("Column.IsNullPresent has unexpected type %T", x)
	}
	return nil
}

func _Column_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Column)
	switch tag {
	case 6: // isNull_present.isNull
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.IsNullPresent = &Column_IsNull{x != 0}
		return true, err
	default:
		return false, nil
	}
}

func _Column_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Column)
	// isNull_present
	switch x := m.IsNullPresent.(type) {
	case *Column_IsNull:
		n += 1 // tag and wire
		n += 1
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type RowData struct {
	// * 字段信息，增量数据(修改前,删除前) *
	BeforeColumns []*Column `protobuf:"bytes,1,rep,name=beforeColumns,proto3" json:"beforeColumns,omitempty"`
	// * 字段信息，增量数据(修改后,新增后)  *
	AfterColumns []*Column `protobuf:"bytes,2,rep,name=afterColumns,proto3" json:"afterColumns,omitempty"`
	// *预留扩展*
	Props                []*Pair  `protobuf:"bytes,3,rep,name=props,proto3" json:"props,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RowData) Reset()         { *m = RowData{} }
func (m *RowData) String() string { return proto.CompactTextString(m) }
func (*RowData) ProtoMessage()    {}
func (*RowData) Descriptor() ([]byte, []int) {
	return fileDescriptor_EntryProtocol_2a4ebfbd10b58cba, []int{3}
}
func (m *RowData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RowData.Unmarshal(m, b)
}
func (m *RowData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RowData.Marshal(b, m, deterministic)
}
func (dst *RowData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RowData.Merge(dst, src)
}
func (m *RowData) XXX_Size() int {
	return xxx_messageInfo_RowData.Size(m)
}
func (m *RowData) XXX_DiscardUnknown() {
	xxx_messageInfo_RowData.DiscardUnknown(m)
}

var xxx_messageInfo_RowData proto.InternalMessageInfo

func (m *RowData) GetBeforeColumns() []*Column {
	if m != nil {
		return m.BeforeColumns
	}
	return nil
}

func (m *RowData) GetAfterColumns() []*Column {
	if m != nil {
		return m.AfterColumns
	}
	return nil
}

func (m *RowData) GetProps() []*Pair {
	if m != nil {
		return m.Props
	}
	return nil
}

// *message row 每行变更数据的数据结构*
type RowChange struct {
	// *tableId,由数据库产生*
	TableId int64 `protobuf:"varint,1,opt,name=tableId,proto3" json:"tableId,omitempty"`
	// [default = UPDATE]
	//
	// Types that are valid to be assigned to EventTypePresent:
	//	*RowChange_EventType
	EventTypePresent isRowChange_EventTypePresent `protobuf_oneof:"eventType_present"`
	// [default = false]
	//
	// Types that are valid to be assigned to IsDdlPresent:
	//	*RowChange_IsDdl
	IsDdlPresent isRowChange_IsDdlPresent `protobuf_oneof:"isDdl_present"`
	// * ddl/query的sql语句  *
	Sql string `protobuf:"bytes,11,opt,name=sql,proto3" json:"sql,omitempty"`
	// * 一次数据库变更可能存在多行  *
	RowDatas []*RowData `protobuf:"bytes,12,rep,name=rowDatas,proto3" json:"rowDatas,omitempty"`
	// *预留扩展*
	Props []*Pair `protobuf:"bytes,13,rep,name=props,proto3" json:"props,omitempty"`
	// * ddl/query的schemaName，会存在跨库ddl，需要保留执行ddl的当前schemaName  *
	DdlSchemaName        string   `protobuf:"bytes,14,opt,name=ddlSchemaName,proto3" json:"ddlSchemaName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RowChange) Reset()         { *m = RowChange{} }
func (m *RowChange) String() string { return proto.CompactTextString(m) }
func (*RowChange) ProtoMessage()    {}
func (*RowChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_EntryProtocol_2a4ebfbd10b58cba, []int{4}
}
func (m *RowChange) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RowChange.Unmarshal(m, b)
}
func (m *RowChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RowChange.Marshal(b, m, deterministic)
}
func (dst *RowChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RowChange.Merge(dst, src)
}
func (m *RowChange) XXX_Size() int {
	return xxx_messageInfo_RowChange.Size(m)
}
func (m *RowChange) XXX_DiscardUnknown() {
	xxx_messageInfo_RowChange.DiscardUnknown(m)
}

var xxx_messageInfo_RowChange proto.InternalMessageInfo

func (m *RowChange) GetTableId() int64 {
	if m != nil {
		return m.TableId
	}
	return 0
}

type isRowChange_EventTypePresent interface {
	isRowChange_EventTypePresent()
}

type RowChange_EventType struct {
	EventType EventType `protobuf:"varint,2,opt,name=eventType,proto3,enum=com.alibaba.otter.canal.protocol.EventType,oneof"`
}

func (*RowChange_EventType) isRowChange_EventTypePresent() {}

func (m *RowChange) GetEventTypePresent() isRowChange_EventTypePresent {
	if m != nil {
		return m.EventTypePresent
	}
	return nil
}

func (m *RowChange) GetEventType() EventType {
	if x, ok := m.GetEventTypePresent().(*RowChange_EventType); ok {
		return x.EventType
	}
	return EventType_EVENTTYPECOMPATIBLEPROTO2
}

type isRowChange_IsDdlPresent interface {
	isRowChange_IsDdlPresent()
}

type RowChange_IsDdl struct {
	IsDdl bool `protobuf:"varint,10,opt,name=isDdl,proto3,oneof"`
}

func (*RowChange_IsDdl) isRowChange_IsDdlPresent() {}

func (m *RowChange) GetIsDdlPresent() isRowChange_IsDdlPresent {
	if m != nil {
		return m.IsDdlPresent
	}
	return nil
}

func (m *RowChange) GetIsDdl() bool {
	if x, ok := m.GetIsDdlPresent().(*RowChange_IsDdl); ok {
		return x.IsDdl
	}
	return false
}

func (m *RowChange) GetSql() string {
	if m != nil {
		return m.Sql
	}
	return ""
}

func (m *RowChange) GetRowDatas() []*RowData {
	if m != nil {
		return m.RowDatas
	}
	return nil
}

func (m *RowChange) GetProps() []*Pair {
	if m != nil {
		return m.Props
	}
	return nil
}

func (m *RowChange) GetDdlSchemaName() string {
	if m != nil {
		return m.DdlSchemaName
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RowChange) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RowChange_OneofMarshaler, _RowChange_OneofUnmarshaler, _RowChange_OneofSizer, []interface{}{
		(*RowChange_EventType)(nil),
		(*RowChange_IsDdl)(nil),
	}
}

func _RowChange_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RowChange)
	// eventType_present
	switch x := m.EventTypePresent.(type) {
	case *RowChange_EventType:
		b.EncodeVarint(2<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.EventType))
	case nil:
	default:
		return fmt.Errorf("RowChange.EventTypePresent has unexpected type %T", x)
	}
	// isDdl_present
	switch x := m.IsDdlPresent.(type) {
	case *RowChange_IsDdl:
		t := uint64(0)
		if x.IsDdl {
			t = 1
		}
		b.EncodeVarint(10<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case nil:
	default:
		return fmt.Errorf("RowChange.IsDdlPresent has unexpected type %T", x)
	}
	return nil
}

func _RowChange_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RowChange)
	switch tag {
	case 2: // eventType_present.eventType
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.EventTypePresent = &RowChange_EventType{EventType(x)}
		return true, err
	case 10: // isDdl_present.isDdl
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.IsDdlPresent = &RowChange_IsDdl{x != 0}
		return true, err
	default:
		return false, nil
	}
}

func _RowChange_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RowChange)
	// eventType_present
	switch x := m.EventTypePresent.(type) {
	case *RowChange_EventType:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.EventType))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// isDdl_present
	switch x := m.IsDdlPresent.(type) {
	case *RowChange_IsDdl:
		n += 1 // tag and wire
		n += 1
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// *开始事务的一些信息*
type TransactionBegin struct {
	// *已废弃，请使用header里的executeTime*
	ExecuteTime int64 `protobuf:"varint,1,opt,name=executeTime,proto3" json:"executeTime,omitempty"`
	// *已废弃，Begin里不提供事务id*
	TransactionId string `protobuf:"bytes,2,opt,name=transactionId,proto3" json:"transactionId,omitempty"`
	// *预留扩展*
	Props []*Pair `protobuf:"bytes,3,rep,name=props,proto3" json:"props,omitempty"`
	// *执行的thread Id*
	ThreadId             int64    `protobuf:"varint,4,opt,name=threadId,proto3" json:"threadId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TransactionBegin) Reset()         { *m = TransactionBegin{} }
func (m *TransactionBegin) String() string { return proto.CompactTextString(m) }
func (*TransactionBegin) ProtoMessage()    {}
func (*TransactionBegin) Descriptor() ([]byte, []int) {
	return fileDescriptor_EntryProtocol_2a4ebfbd10b58cba, []int{5}
}
func (m *TransactionBegin) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransactionBegin.Unmarshal(m, b)
}
func (m *TransactionBegin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransactionBegin.Marshal(b, m, deterministic)
}
func (dst *TransactionBegin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionBegin.Merge(dst, src)
}
func (m *TransactionBegin) XXX_Size() int {
	return xxx_messageInfo_TransactionBegin.Size(m)
}
func (m *TransactionBegin) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionBegin.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionBegin proto.InternalMessageInfo

func (m *TransactionBegin) GetExecuteTime() int64 {
	if m != nil {
		return m.ExecuteTime
	}
	return 0
}

func (m *TransactionBegin) GetTransactionId() string {
	if m != nil {
		return m.TransactionId
	}
	return ""
}

func (m *TransactionBegin) GetProps() []*Pair {
	if m != nil {
		return m.Props
	}
	return nil
}

func (m *TransactionBegin) GetThreadId() int64 {
	if m != nil {
		return m.ThreadId
	}
	return 0
}

// *结束事务的一些信息*
type TransactionEnd struct {
	// *已废弃，请使用header里的executeTime*
	ExecuteTime int64 `protobuf:"varint,1,opt,name=executeTime,proto3" json:"executeTime,omitempty"`
	// *事务号*
	TransactionId string `protobuf:"bytes,2,opt,name=transactionId,proto3" json:"transactionId,omitempty"`
	// *预留扩展*
	Props                []*Pair  `protobuf:"bytes,3,rep,name=props,proto3" json:"props,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TransactionEnd) Reset()         { *m = TransactionEnd{} }
func (m *TransactionEnd) String() string { return proto.CompactTextString(m) }
func (*TransactionEnd) ProtoMessage()    {}
func (*TransactionEnd) Descriptor() ([]byte, []int) {
	return fileDescriptor_EntryProtocol_2a4ebfbd10b58cba, []int{6}
}
func (m *TransactionEnd) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransactionEnd.Unmarshal(m, b)
}
func (m *TransactionEnd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransactionEnd.Marshal(b, m, deterministic)
}
func (dst *TransactionEnd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionEnd.Merge(dst, src)
}
func (m *TransactionEnd) XXX_Size() int {
	return xxx_messageInfo_TransactionEnd.Size(m)
}
func (m *TransactionEnd) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionEnd.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionEnd proto.InternalMessageInfo

func (m *TransactionEnd) GetExecuteTime() int64 {
	if m != nil {
		return m.ExecuteTime
	}
	return 0
}

func (m *TransactionEnd) GetTransactionId() string {
	if m != nil {
		return m.TransactionId
	}
	return ""
}

func (m *TransactionEnd) GetProps() []*Pair {
	if m != nil {
		return m.Props
	}
	return nil
}

// *预留扩展*
type Pair struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Pair) Reset()         { *m = Pair{} }
func (m *Pair) String() string { return proto.CompactTextString(m) }
func (*Pair) ProtoMessage()    {}
func (*Pair) Descriptor() ([]byte, []int) {
	return fileDescriptor_EntryProtocol_2a4ebfbd10b58cba, []int{7}
}
func (m *Pair) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Pair.Unmarshal(m, b)
}
func (m *Pair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Pair.Marshal(b, m, deterministic)
}
func (dst *Pair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pair.Merge(dst, src)
}
func (m *Pair) XXX_Size() int {
	return xxx_messageInfo_Pair.Size(m)
}
func (m *Pair) XXX_DiscardUnknown() {
	xxx_messageInfo_Pair.DiscardUnknown(m)
}

var xxx_messageInfo_Pair proto.InternalMessageInfo

func (m *Pair) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Pair) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func init() {
	proto.RegisterType((*Entry)(nil), "com.alibaba.otter.canal.protocol.Entry")
	proto.RegisterType((*Header)(nil), "com.alibaba.otter.canal.protocol.Header")
	proto.RegisterType((*Column)(nil), "com.alibaba.otter.canal.protocol.Column")
	proto.RegisterType((*RowData)(nil), "com.alibaba.otter.canal.protocol.RowData")
	proto.RegisterType((*RowChange)(nil), "com.alibaba.otter.canal.protocol.RowChange")
	proto.RegisterType((*TransactionBegin)(nil), "com.alibaba.otter.canal.protocol.TransactionBegin")
	proto.RegisterType((*TransactionEnd)(nil), "com.alibaba.otter.canal.protocol.TransactionEnd")
	proto.RegisterType((*Pair)(nil), "com.alibaba.otter.canal.protocol.Pair")
	proto.RegisterEnum("com.alibaba.otter.canal.protocol.EntryType", EntryType_name, EntryType_value)
	proto.RegisterEnum("com.alibaba.otter.canal.protocol.EventType", EventType_name, EventType_value)
	proto.RegisterEnum("com.alibaba.otter.canal.protocol.Type", Type_name, Type_value)
}

func init() {
	proto.RegisterFile("protocol/EntryProtocol.proto", fileDescriptor_EntryProtocol_2a4ebfbd10b58cba)
}

var fileDescriptor_EntryProtocol_2a4ebfbd10b58cba = []byte{
	// 1058 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x36, 0xf5, 0xcf, 0xd1, 0x8f, 0x37, 0x5b, 0x21, 0x60, 0x83, 0xb4, 0x10, 0x04, 0xa3, 0x70,
	0x5d, 0x40, 0x2d, 0xdc, 0x6b, 0x0f, 0x25, 0xa9, 0x85, 0x25, 0x58, 0xa2, 0x94, 0xf5, 0x3a, 0xb5,
	0x4f, 0x06, 0x2d, 0xae, 0x6d, 0xa2, 0x14, 0xa9, 0x90, 0x94, 0x13, 0xbf, 0x41, 0x9f, 0xa0, 0x0f,
	0x52, 0xf4, 0x2d, 0x7a, 0xee, 0x23, 0xe4, 0xd8, 0x77, 0x28, 0x76, 0xf9, 0x27, 0xb5, 0x0d, 0xe4,
	0xb8, 0x97, 0xdc, 0xe6, 0x1b, 0xef, 0x37, 0xfa, 0x66, 0xf6, 0x9b, 0xa5, 0xe1, 0xe5, 0x2a, 0x0c,
	0xe2, 0x60, 0x11, 0x78, 0xdf, 0x12, 0x3f, 0x0e, 0x1f, 0xe6, 0x29, 0x1a, 0xc8, 0x34, 0xee, 0x2d,
	0x82, 0xe5, 0xc0, 0xf6, 0xdc, 0x6b, 0xfb, 0xda, 0x1e, 0x04, 0x71, 0xcc, 0xc3, 0xc1, 0xc2, 0xf6,
	0xed, 0xf4, 0xcf, 0x8b, 0xc0, 0xeb, 0xff, 0xa1, 0x40, 0x55, 0x32, 0xf1, 0x8f, 0x50, 0xbb, 0xe3,
	0xb6, 0xc3, 0x43, 0x4d, 0xe9, 0x29, 0x87, 0xcd, 0xe3, 0xc3, 0xc1, 0x2e, 0xf2, 0x60, 0x24, 0xcf,
	0xd3, 0x94, 0x87, 0x4f, 0x41, 0xe5, 0xa2, 0x14, 0x7b, 0x58, 0x71, 0xad, 0xd4, 0x53, 0x0e, 0x3b,
	0xc7, 0xdf, 0xec, 0x2e, 0x42, 0x32, 0xca, 0x68, 0x8f, 0x16, 0x7c, 0xfc, 0x25, 0x40, 0x14, 0x07,
	0x21, 0x7f, 0x6d, 0x7b, 0x6b, 0xae, 0x95, 0x7b, 0xca, 0x61, 0x8b, 0x6e, 0x64, 0x8c, 0xcf, 0xe0,
	0x59, 0x7e, 0xf8, 0x6a, 0x15, 0xf2, 0x88, 0xfb, 0x71, 0xff, 0xcf, 0x0a, 0xd4, 0x12, 0x51, 0xf8,
	0x05, 0xd4, 0xef, 0x79, 0x18, 0xb9, 0x81, 0x2f, 0xfb, 0xa9, 0x8e, 0xf6, 0x68, 0x96, 0xc0, 0x3d,
	0x68, 0x7a, 0xc1, 0xed, 0x8d, 0xeb, 0x71, 0xcb, 0x5e, 0x26, 0x52, 0x55, 0xba, 0x99, 0xc2, 0x07,
	0xd0, 0x4e, 0xe1, 0xec, 0xe6, 0x26, 0xe2, 0xb1, 0x14, 0x50, 0xa6, 0xdb, 0x49, 0xfc, 0x02, 0x1a,
	0x11, 0x0f, 0xef, 0x79, 0x38, 0x76, 0xb4, 0x8a, 0x3c, 0x90, 0x63, 0xdc, 0x87, 0x56, 0x12, 0x73,
	0xdf, 0x0c, 0x1c, 0xae, 0x55, 0xe5, 0x8f, 0x6c, 0xe5, 0x84, 0x0e, 0xfe, 0x8e, 0x2f, 0xd6, 0x31,
	0x67, 0xee, 0x92, 0x6b, 0x35, 0x59, 0x62, 0x33, 0x85, 0x47, 0x00, 0x51, 0xb0, 0x0e, 0x17, 0x5c,
	0xce, 0xb4, 0x2e, 0x67, 0xfa, 0xd5, 0xee, 0x99, 0xca, 0x71, 0x2a, 0x74, 0x83, 0x2b, 0xe7, 0xb9,
	0xb8, 0xe3, 0x4b, 0x5b, 0xb6, 0xdc, 0x90, 0x6a, 0x36, 0x32, 0xf8, 0x25, 0xa8, 0xb1, 0x7d, 0x9d,
	0x4e, 0x44, 0x95, 0x7f, 0x2e, 0x12, 0x52, 0xe9, 0x3d, 0xf7, 0xe3, 0x09, 0xf7, 0x6f, 0xe3, 0x3b,
	0x0d, 0x52, 0xa5, 0x45, 0x4a, 0x5e, 0xbe, 0x80, 0x52, 0x68, 0xf3, 0xd1, 0x97, 0x9f, 0x51, 0x46,
	0x25, 0x5a, 0xf0, 0xf1, 0x0f, 0x50, 0x5d, 0x85, 0xc1, 0x2a, 0xd2, 0x5a, 0xbd, 0xf2, 0x61, 0xf3,
	0x31, 0x1d, 0xcf, 0x6d, 0x37, 0xa4, 0x09, 0x09, 0x63, 0xa8, 0xdc, 0xc6, 0xae, 0xa3, 0xb5, 0x65,
	0x17, 0x32, 0x36, 0x9e, 0xc1, 0x7e, 0x7a, 0xfb, 0x99, 0x59, 0x8c, 0x2e, 0xe0, 0x62, 0x3e, 0x79,
	0x56, 0xf8, 0x2a, 0xd3, 0x91, 0xfb, 0xea, 0xb7, 0x12, 0xd4, 0xcc, 0xc0, 0x5b, 0x2f, 0x7d, 0xdc,
	0x85, 0xaa, 0xeb, 0x3b, 0xfc, 0x5d, 0xe2, 0x2a, 0x9a, 0x00, 0xac, 0x41, 0x3d, 0x7a, 0xe3, 0xe5,
	0xc6, 0xaf, 0xd2, 0x0c, 0x0a, 0x31, 0xbe, 0x18, 0x69, 0x39, 0x11, 0x23, 0x62, 0x59, 0x23, 0x3a,
	0xe5, 0x0f, 0xd2, 0x34, 0x0d, 0x9a, 0x00, 0x51, 0x63, 0xbd, 0x72, 0xec, 0x98, 0x3b, 0xd2, 0x2c,
	0x0d, 0x9a, 0x41, 0xac, 0x41, 0xcd, 0x8d, 0xac, 0xb5, 0xe7, 0x49, 0x8b, 0x34, 0x46, 0x7b, 0x34,
	0xc5, 0xc5, 0xa0, 0xea, 0x4f, 0x19, 0x54, 0x17, 0xaa, 0xf7, 0x72, 0xbd, 0x12, 0x3b, 0x24, 0x00,
	0x3f, 0x87, 0x9a, 0x97, 0x5c, 0xb3, 0x2a, 0x5b, 0x49, 0x91, 0x70, 0xc8, 0xf2, 0x21, 0xeb, 0x12,
	0x12, 0x87, 0xe4, 0x09, 0x03, 0x41, 0x27, 0xd1, 0x94, 0x0f, 0xed, 0xbd, 0x02, 0x75, 0x1a, 0xbc,
	0x1d, 0xda, 0xb1, 0x8d, 0x2d, 0x68, 0x5f, 0xf3, 0x9b, 0x20, 0xe4, 0xc9, 0x14, 0x23, 0x4d, 0x91,
	0x7a, 0x1f, 0xf1, 0xc6, 0x24, 0x04, 0xba, 0x4d, 0xc7, 0x13, 0x68, 0xd9, 0x37, 0x31, 0x0f, 0xb3,
	0x72, 0xa5, 0x8f, 0x2c, 0xb7, 0xc5, 0x2e, 0xa6, 0x58, 0x7e, 0xc2, 0x14, 0xfb, 0x7f, 0x95, 0x40,
	0xa5, 0xc1, 0x5b, 0xf3, 0xce, 0xf6, 0x6f, 0xb9, 0xb8, 0x45, 0xb9, 0x36, 0x63, 0x47, 0x3a, 0xa4,
	0x4c, 0x33, 0xb8, 0xbd, 0x21, 0xa5, 0x8f, 0xdf, 0x90, 0xbd, 0xcd, 0x0d, 0x79, 0x2e, 0x2c, 0x34,
	0x74, 0x3c, 0x79, 0x11, 0x8d, 0x91, 0x42, 0x13, 0x88, 0x11, 0x94, 0xa3, 0x37, 0x9e, 0x5c, 0x40,
	0x95, 0x8a, 0x10, 0x13, 0x68, 0x84, 0xc9, 0x2d, 0x64, 0xeb, 0xf4, 0xf5, 0xee, 0x5f, 0x4d, 0xef,
	0x8d, 0xe6, 0xd4, 0x62, 0x46, 0xed, 0xa7, 0x38, 0xed, 0x00, 0xda, 0x8e, 0xe3, 0x9d, 0x15, 0x0f,
	0x50, 0x47, 0x0a, 0xdc, 0x4e, 0xfe, 0xe7, 0xee, 0x19, 0xfb, 0xd0, 0x96, 0xad, 0xe5, 0xbe, 0xfa,
	0x5d, 0x01, 0xc4, 0x42, 0xdb, 0x8f, 0xec, 0x45, 0xec, 0x06, 0xbe, 0xc1, 0x6f, 0x5d, 0xff, 0x9f,
	0x4f, 0xa9, 0xf2, 0xef, 0xa7, 0xf4, 0x00, 0xda, 0x71, 0xc1, 0x1a, 0x3b, 0xe9, 0xb3, 0xbf, 0x9d,
	0xfc, 0x7f, 0x56, 0x10, 0x1f, 0x84, 0xf8, 0x2e, 0xe4, 0xb6, 0x53, 0x7c, 0x10, 0x32, 0xdc, 0xff,
	0x55, 0x81, 0xce, 0x86, 0x6c, 0xe2, 0x3b, 0x9f, 0x86, 0xe8, 0xfe, 0x00, 0x2a, 0x02, 0x0a, 0xeb,
	0xfc, 0xcc, 0x1f, 0xa4, 0x0a, 0x95, 0x8a, 0xb0, 0x78, 0x1f, 0x4a, 0x1b, 0xef, 0xc3, 0xd1, 0x2f,
	0x0a, 0xa8, 0xf9, 0x47, 0x1b, 0x7f, 0x01, 0x9f, 0x13, 0x8b, 0xd1, 0x4b, 0x76, 0x39, 0x27, 0xe6,
	0x6c, 0x3a, 0xd7, 0xd9, 0xd8, 0x98, 0x90, 0x39, 0x9d, 0xb1, 0xd9, 0x31, 0xda, 0xc3, 0x5d, 0x40,
	0x8c, 0xea, 0xd6, 0x99, 0x6e, 0xb2, 0xf1, 0xcc, 0x32, 0xc8, 0xc9, 0xd8, 0x42, 0x0a, 0x6e, 0x42,
	0x9d, 0xce, 0x7e, 0x1a, 0xea, 0x4c, 0x47, 0x25, 0x8c, 0xa1, 0xb3, 0x71, 0x84, 0x58, 0x43, 0x54,
	0xc6, 0x1a, 0x74, 0x65, 0xd5, 0x2b, 0x51, 0xf6, 0x6a, 0x44, 0x74, 0xca, 0x0c, 0xa2, 0x33, 0x54,
	0x11, 0xd4, 0x13, 0x36, 0x1e, 0x4e, 0x66, 0x27, 0xa8, 0x7a, 0xf4, 0x5e, 0x48, 0xc9, 0x77, 0x42,
	0x48, 0x79, 0x4d, 0x2c, 0xf6, 0x01, 0x29, 0x00, 0xb5, 0xb1, 0x75, 0x46, 0x28, 0x43, 0x8a, 0x88,
	0xcf, 0xe7, 0x43, 0x9d, 0x11, 0x54, 0x12, 0xf1, 0x90, 0x4c, 0x08, 0x23, 0xa8, 0x2c, 0x62, 0x93,
	0x12, 0x91, 0xaf, 0x60, 0x15, 0xaa, 0xfa, 0x84, 0x11, 0x8a, 0xaa, 0x22, 0x24, 0x54, 0x3f, 0x23,
	0xa8, 0x26, 0xc2, 0x57, 0xe7, 0x84, 0x5e, 0xa2, 0x3a, 0x6e, 0x41, 0x83, 0xd1, 0x73, 0xcb, 0x14,
	0xc7, 0x1b, 0x82, 0x4a, 0x89, 0xa5, 0x4f, 0x09, 0x52, 0x65, 0x99, 0xb1, 0x35, 0x24, 0x17, 0x08,
	0x64, 0xf9, 0x24, 0x6e, 0xe2, 0x06, 0x54, 0x84, 0x78, 0xd4, 0x12, 0xdc, 0x0b, 0xdd, 0x9c, 0x4d,
	0xa7, 0x63, 0x86, 0xda, 0xb8, 0x03, 0x70, 0xa1, 0xd3, 0xd9, 0x64, 0x62, 0xe8, 0xe6, 0x29, 0xea,
	0x08, 0x3c, 0x2d, 0x9a, 0xde, 0x3f, 0x32, 0xa0, 0x22, 0x3b, 0xd4, 0xa0, 0xfb, 0xe1, 0xe6, 0x66,
	0x54, 0x37, 0x27, 0x04, 0x29, 0x42, 0xe2, 0xf4, 0xf2, 0xec, 0xd5, 0x04, 0x95, 0x44, 0x38, 0x3f,
	0x11, 0x61, 0xd9, 0xf8, 0x0e, 0x76, 0xfe, 0x37, 0x68, 0x80, 0x29, 0xb0, 0xbc, 0xdc, 0x91, 0x72,
	0x5d, 0x93, 0xf9, 0xef, 0xff, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x7d, 0xf5, 0x41, 0x05, 0x64, 0x0a,
	0x00, 0x00,
}
